<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><id>/Blog/</id><title>我的个人博客</title><updated>2022-05-08T14:47:11.673645+08:06</updated><author><name>LSQ</name><email>1959376918@qq.com</email></author><link href="/Blog/" rel="alternate"/><generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator><logo>https://cdn.jsdelivr.net/gh/LSQsjtu/Blog@gh-pages/f-logo.png</logo><subtitle>记录生活美好</subtitle><entry><id>/Blog/archives/nerf/</id><title>nerf</title><updated>2022-05-08T14:47:11.674118+00:00</updated><author><name>刘胜琪</name><email>1959376918@qq.com</email><uri>https://lsqsjtu.github.io/Blog/</uri></author><content>&lt;p&gt;&lt;strong&gt;nerf&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;链接：&lt;a href="https://www.youtube.com/watch?v=otly9jcZ0Jg&amp;amp;t=5215s"&gt;nerf介绍&lt;/a&gt;&lt;/p&gt;&lt;p&gt;volumetric rendering&lt;/p&gt;&lt;p&gt;ray_o, ray_d输入，返回rgb值，和真值算MSE loss。&lt;/p&gt;&lt;p&gt;volumetric density积分转化为分段&lt;/p&gt;&lt;p&gt;xyz低维信息，难以使用，通过input coordinate mapping 转化为Fourier feature&lt;/p&gt;&lt;p&gt;转换通过B matrix，最终性能和B matrix有较大关系&lt;/p&gt;&lt;p&gt;problem：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;速度&lt;/li&gt;
&lt;li&gt;过拟合和欠拟合&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;dynamic nerf&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;通过学习一一映射的函数关系，在某一平滑的定义域内。然后通过输入位置，返回对应的值&lt;/p&gt;&lt;p&gt;&lt;strong&gt;static nerf&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;通过学习一个点和一个点的对应关系，输入点位置，输出对应的rgb和alpha，其他位置的变化通过其他方法实现&lt;/p&gt;</content><link href="/Blog/archives/nerf/" rel="alternate"/><published>2022-02-26T00:00:00+08:06</published></entry><entry><id>/Blog/archives/animate%20paper/</id><title>animate paper</title><updated>2022-05-08T14:47:11.674083+00:00</updated><author><name>刘胜琪</name><email>1959376918@qq.com</email><uri>https://lsqsjtu.github.io/Blog/</uri></author><content>&lt;p&gt;&lt;strong&gt;3D Menagerie: Modeling the 3D Shape and Pose of Animals&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;task:&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;fitting new animals from template&lt;/li&gt;
&lt;li&gt;deformation by SMAL&lt;/li&gt;
&lt;li&gt;fit animals to image&lt;/li&gt;
&lt;li&gt;combine the 3D scans and images&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;problem:&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;less data&lt;/li&gt;
&lt;li&gt;difficult tail part&lt;/li&gt;
&lt;li&gt;a variety of data species&lt;/li&gt;
&lt;/ul&gt;
</content><link href="/Blog/archives/animate%20paper/" rel="alternate"/><published>2022-03-22T00:00:00+08:06</published></entry><entry><id>/Blog/archives/%E4%BF%A1%E6%9D%A1/</id><title>信条</title><updated>2022-05-08T14:47:11.674047+00:00</updated><author><name>刘胜琪</name><email>1959376918@qq.com</email><uri>https://lsqsjtu.github.io/Blog/</uri></author><content>&lt;p&gt;&lt;strong&gt;信条&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;整体场景非常震撼，电影设定背景新奇。&lt;/p&gt;&lt;p&gt;运用电影倒放的拍摄手法&lt;/p&gt;&lt;p&gt;人性，世界与个人，英雄主义和个人主义的强烈撞击&lt;/p&gt;&lt;p&gt;还是超级英雄主义&lt;/p&gt;</content><link href="/Blog/archives/%E4%BF%A1%E6%9D%A1/" rel="alternate"/><published>2022-03-25T00:00:00+08:06</published></entry><entry><id>/Blog/archives/leetcode/</id><title>leetcode刷题</title><updated>2022-05-08T14:47:11.674013+00:00</updated><author><name>刘胜琪</name><email>1959376918@qq.com</email><uri>https://lsqsjtu.github.io/Blog/</uri></author><content>&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;list.extend返回null，直接修改原list，append是将list整个放在末尾&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Python数据结构学习&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;==堆== import ==heapq==&lt;/p&gt;&lt;p&gt;heappush(heap, item): 将 &lt;em&gt;item&lt;/em&gt; 的值加入 &lt;em&gt;heap&lt;/em&gt; 中，保持堆的不变性。&lt;/p&gt;&lt;p&gt;heappop(heap): 弹出并返回 &lt;em&gt;heap&lt;/em&gt; 的最小的元素，保持堆的不变性。如果堆为空，抛出 &lt;a href="https://docs.python.org/zh-cn/3/library/exceptions.html#IndexError"&gt;&lt;code&gt;IndexError&lt;/code&gt;&lt;/a&gt; 。使用 &lt;code&gt;heap[0]&lt;/code&gt; ，可以只访问最小的元素而不弹出它。&lt;/p&gt;&lt;p&gt;优先队列（SortedList）&lt;/p&gt;&lt;p&gt;==哈希表==&lt;/p&gt;&lt;p&gt;Counter 记录对应字符串或者对应值的个数&lt;/p&gt;&lt;p&gt;cnt[x]是对应值的size&lt;/p&gt;&lt;p&gt;&lt;strong&gt;树状数组&lt;/strong&gt;&lt;/p&gt;&lt;figure style="flex: 98.45238095238095" &gt;&lt;img width="1654" height="840" src="https://cdn.jsdelivr.net/gh/LSQsjtu/Blog@gh-pages/archives/assets/d0d085b71c57bda23e8a2f33a376bcea.png" /&gt;&lt;/figure&gt;&lt;figure style="flex: 94.20654911838791" &gt;&lt;img width="748" height="397" src="https://cdn.jsdelivr.net/gh/LSQsjtu/Blog@gh-pages/archives/assets/1d66fbca451285b471947b5b782a23da.png" /&gt;&lt;/figure&gt;&lt;p&gt;然后通过对应位置的求和得到最终的结果&lt;/p&gt;&lt;p&gt;具体的树的结构&lt;/p&gt;&lt;img src="2022-3-29-leetcode刷题.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhb2thaV9Bc3N1bHRNYXN0ZXI=,size_16,color_FFFFFF,t_70-16490563397235.png" style="zoom: 67%;" /&gt;
&lt;p&gt;==lowbit==&lt;/p&gt;&lt;p&gt;x&amp;amp;-x: 找最近的不是0的位&lt;/p&gt;&lt;p&gt;对于字典排序，dfs搜素，最后一位为9则上一位加10，如果之后乘以10仍然在范围之内则乘以10，继续加1&lt;/p&gt;&lt;p&gt;==凸包==&lt;/p&gt;&lt;p&gt;Andrew算法，找下凸壳，上凸壳，通过叉乘判断点的位置在左方还是右方，，如果在右方，把栈中末尾元素pop，栈是在维护凸包的边。&lt;/p&gt;</content><link href="/Blog/archives/leetcode/" rel="alternate"/><published>2022-03-29T00:00:00+08:06</published></entry><entry><id>/Blog/archives/attention%20is%20all%20you%20need/</id><title>attention is all you need</title><updated>2022-05-08T14:47:11.673975+00:00</updated><author><name>刘胜琪</name><email>1959376918@qq.com</email><uri>https://lsqsjtu.github.io/Blog/</uri></author><content>&lt;p&gt;&lt;strong&gt;Attention is all you need&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;seq2seq中RNN全部盖臣self-attention layer，相比较于RNN，支持&lt;strong&gt;parallel operation&lt;/strong&gt;，同样能够看到更远的信息。加入人为生成的position-encoder信息&lt;/p&gt;&lt;p&gt;主要结构如下所示：&lt;/p&gt;&lt;figure style="flex: 73.00357568533968" &gt;&lt;img width="1225" height="839" src="https://cdn.jsdelivr.net/gh/LSQsjtu/Blog@gh-pages/archives/assets/d8392fca4f9fc175255d258992e45ea7.png" /&gt;&lt;/figure&gt;&lt;p&gt;其中q, k, v分别指代&lt;/p&gt;&lt;img src="attetion.assets/Snipaste_2022-03-31_20-23-29.png" style="zoom:50%;" /&gt;
&lt;p&gt;其中增加的结构multi-head能够看更远，学习到更多的信息, 不同head注意不同距离的信息。&lt;/p&gt;&lt;p&gt;其中layer-norm是用于将input normalization，符合RNN的性质&lt;/p&gt;&lt;p&gt;sine and cosine function做position-encoding，能够推测更长的时序信号&lt;/p&gt;&lt;p&gt;DERT将目标检测任务归结为&lt;strong&gt;输出无序集合&lt;/strong&gt;，Faster R-CNN等算法通过各种操作，并结合复杂后处理最终才得到无序集合属于绕路&lt;/p&gt;&lt;p&gt;层数：L，词向量长度H，multihead：A，大致计算出参数，当词语数量较多时，参数主要是embedding 层&lt;/p&gt;&lt;p&gt;并且在transformer中编码器看不到解码器的信息。&lt;/p&gt;</content><link href="/Blog/archives/attention%20is%20all%20you%20need/" rel="alternate"/><published>2022-03-31T00:00:00+08:06</published></entry><entry><id>/Blog/archives/District%2013/</id><title>暴力街区</title><updated>2022-05-08T14:47:11.673937+00:00</updated><author><name>刘胜琪</name><email>1959376918@qq.com</email><uri>https://lsqsjtu.github.io/Blog/</uri></author><content>&lt;p&gt;&lt;strong&gt;暴力街区&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;非常酷炫的跑酷追击效果，强烈的打击感。&lt;/p&gt;&lt;p&gt;总的来说是一部非常棒的动作片，叙事感觉较为平铺直叙，较为简单，疑问设置少，感觉比较简单。&lt;/p&gt;&lt;p&gt;增强打击感的作用：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;快慢镜头的掌控&lt;/li&gt;
&lt;li&gt;身上加上闪光粉&lt;/li&gt;
&lt;li&gt;将拳影剪贴到对应的地方&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;叙事背景非常简单，构造一个虚拟的犯罪区域，缺乏历史的厚重感&lt;/p&gt;</content><link href="/Blog/archives/District%2013/" rel="alternate"/><published>2022-04-02T00:00:00+08:06</published></entry><entry><id>/Blog/archives/c%2B%2B%20part/</id><title>leetcode刷题</title><updated>2022-05-08T14:47:11.673897+00:00</updated><author><name>刘胜琪</name><email>1959376918@qq.com</email><uri>https://lsqsjtu.github.io/Blog/</uri></author><content>&lt;p&gt;&lt;strong&gt;C++&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;生成格式vector&lt;int&gt; 变量名&lt;/p&gt;&lt;p&gt;vector.push_back()放入最后，&lt;/p&gt;&lt;p&gt;queue&amp;lt;类型&amp;gt; 变量名 queue.push(), queue.pop(), 先进先出&lt;/p&gt;&lt;p&gt;move(vector) allowing the efficient transfer of resources from &lt;code&gt;t&lt;/code&gt; to another object. &lt;strong&gt;唯一的功能是把左值强制转化为右值&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;实现移动语义，避免拷贝，从而提升程序性能&lt;/strong&gt;, 这样可以避免深拷贝，只提取数值。&lt;/p&gt;</content><link href="/Blog/archives/c%2B%2B%20part/" rel="alternate"/><published>2022-04-08T00:00:00+08:06</published></entry><entry><id>/Blog/archives/a%20shape%20of%20voice/</id><title>声の形</title><updated>2022-05-08T14:47:11.673857+00:00</updated><author><name>刘胜琪</name><email>1959376918@qq.com</email><uri>https://lsqsjtu.github.io/Blog/</uri></author><content>&lt;p&gt;&lt;strong&gt;声の形&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;对自己，从来不要讨厌自己，恶意讨好他人，没有一个人是完美无缺的，在不伤害其他人的情况下接纳自己的缺点。对他人恶意相向只是最简单的，不要想着把自己的悲伤与快乐强加在他人身上&lt;/li&gt;
&lt;li&gt;对待挚友，用心对待，维护这份来之不易的友情&lt;/li&gt;
&lt;li&gt;对待亲情，用心去爱&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Vilot evergarden&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;战争时一直陪伴的感情，没有任何共情，没有非常强烈的带入感。经历无法感受。&lt;/p&gt;</content><link href="/Blog/archives/a%20shape%20of%20voice/" rel="alternate"/><published>2022-04-08T00:00:00+08:06</published></entry><entry><id>/Blog/archives/Paper%20Reading/</id><title>Paper Reading</title><updated>2022-05-08T14:47:11.673811+00:00</updated><author><name>刘胜琪</name><email>1959376918@qq.com</email><uri>https://lsqsjtu.github.io/Blog/</uri></author><content>&lt;p&gt;&lt;strong&gt;阅读论文&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1.title
2.abstract
3.introduction
4.method
5.experiments
6.conclusion&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;第一遍：==标题、摘要、结论==。可以看一看==方法和实验部分重要的图和表==。这样可以花费十几分钟时间了解到论文是否适合你的研究方向。&lt;/li&gt;
&lt;li&gt;第二遍：确定论文值得读之后，可以快速的把整个论文过一遍，不需要知道所有的细节，需要==了解重要的图和表==，知道每一个部分在干什么，作者相比与其他人提出了什么==不同的方法==，圈出==相关文献==。觉得文章太难，可以读==引用的文献==。&lt;/li&gt;
&lt;li&gt;第三遍：提出什么==问题==，用什么==方法==来解决这个问题。==实验==是怎么做的。合上文章，回忆每一个部分在讲什么。换我来可以怎么做，==能不能做得更好==。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;论文项目三步分解法&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;问题&lt;/li&gt;
&lt;li&gt;方法&lt;/li&gt;
&lt;li&gt;结果，以及未来畅想&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;经典论文&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;==Resnet==&lt;/p&gt;&lt;p&gt;残差连接：学习浅层网络没有学习到的residual，当输入为0时后面的网络层基本为0，没有多余的信息，学习==$H(x) - x$==的信息。网络结构的设计使得梯度稳定，不会到零（后人的解释）。原始想法是将机器学习中学习残差的思想运用到深度网络训练中。&lt;/p&gt;&lt;p&gt;bottleneck：先降维，然后提取信息，再提升维度，起到降低算法复杂度的功能，不用学习无用维度的信息。&lt;/p&gt;&lt;p&gt;==Generative adversarial nets==&lt;/p&gt;&lt;p&gt;写作方面&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;对于开创性的工作来说主要说明自己独一无二的地方，基于其他方法改进的主要突出强调区别&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创新点&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;以往是近似构造似然函数去学习这个分布，现在通过模型网络来直接&lt;strong&gt;学习分布&lt;/strong&gt;（于是可以训练了），分布的求解往往是不可逆的，无法求出分布的逆函数，来通过参数求出对应的输出数据，于是采用非常大的数据去盗版模仿&lt;/li&gt;
&lt;li&gt;通过G和D去对抗，minmax最优化分布函数，求取最优值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新的知识点&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;==KL散度==：如果D过拟合会导致输出为0，不好优化求导，后面有工作去更新优化方式，通过更简约的方法去学习这个分布。&lt;/li&gt;
&lt;li&gt;如果数据不属于同一个分布，那么就可以训练同一个二分类去分类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;BERT&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;芝麻街中人物姓名&lt;/p&gt;&lt;p&gt;解决问题&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;可以预训练后广泛运用在其他任务上（加一个输出层）&lt;/li&gt;
&lt;li&gt;将预训练过程和大模型过程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创新点&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;引入==mask==，完形填空，从而可以利用双向的信息，而不是单纯地就将从左向右和从右向左结合在一起&lt;/li&gt;
&lt;li&gt;证明了利用大量没有标号的数据训练，比利用少量有标号的数据训练要更好&lt;/li&gt;
&lt;li&gt;任务相对简单，故&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;写作&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;数值展示：绝对值（相对值）&lt;/li&gt;
&lt;li&gt;比较，开门见山，比较BERT和GPT，Elmo&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;GPT（在下游任务上微调，分阶段训练）&lt;/p&gt;&lt;p&gt;ELmo: RNN 提取特征后再一起用于训练&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;MAE: masked autoencoder&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;解决问题：将Bert引入cv中存在三个问题&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;位置信息不好和图片信息一起输入transform中（但是一般CNN网络架构中顺序卷积会将位置信息传递下去），==ViT已经解决==。&lt;/li&gt;
&lt;li&gt;信息密度不一样（词和图片），词不好去掉，但是图片冗余信息多，所以要丢掉高比率随机块（去掉很多块）、&lt;/li&gt;
&lt;li&gt;decoder的设计，不同层次信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;创新点：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;将ViT和Bert结合起来，构建非对称的autoencoder（encoder只关注没有mask的部分，decoder关注所有信息，并且输入对应的位置信息，重新==生成==mask的部分）&lt;/li&gt;
&lt;li&gt;发现盖住75%的图片，random掩码能够得到较好的信息（示例图片amazing，但是对于其他图片或许没有这么好的效果）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;知识点：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;ViT：将图片分割成16$\times$16的分块，当做词语来学习&lt;/li&gt;
&lt;li&gt;auto：x，y来自同一个样本（如同一个句子或同样的图片），快的模型：efficient，大的模型：scalable&lt;/li&gt;
&lt;li&gt;字词是高层次语义信息，所以简单输出层encoder就可以了，图片语义分割常采用转置的神经网络解码器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;写作：&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;名字：&lt;strong&gt;什么是什么&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;写清训练和测试过程中的操作安排，讲好自己为什么这样做，并且有数据支撑&lt;/p&gt;&lt;/blockquote&gt;
</content><link href="/Blog/archives/Paper%20Reading/" rel="alternate"/><published>2022-04-15T00:00:00+08:06</published></entry><entry><id>/Blog/archives/ffmpeg%E6%95%99%E7%A8%8B/</id><title>ffmpeg教程</title><updated>2022-05-08T14:47:11.673718+00:00</updated><author><name>刘胜琪</name><email>1959376918@qq.com</email><uri>https://lsqsjtu.github.io/Blog/</uri></author><content>&lt;h1&gt;ffmpeg教程&lt;/h1&gt;
&lt;h2&gt;在Linux上安装&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果没有更高的权限，可以这么安装&lt;ul&gt;
&lt;li&gt;将那个&lt;code&gt;.tar.xz&lt;/code&gt;文件解压&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xz -d ***.xz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tar -xvf ***.tar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后有一个ffmpeg就可以直接用了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;常用指令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;查看视频的基本信息&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ffmpeg -i input.mp4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;裁剪&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ffmpeg -i input.mp4 -vf crop=&amp;quot;720:720:280:0&amp;quot; output.mp4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;vf的意思是video filter&lt;/li&gt;
&lt;li&gt;crop里面的四个参数分别是whxy(width, height, 从x开始裁剪, 从y开始裁剪)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调整帧率&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ffmpeg -i input -r 25 output&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;-r后面输入帧率就可以了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;resize video&lt;ul&gt;
&lt;li&gt;假设input是1920x1080，想变成480x320&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ffmpeg -i input -vf scale=480:-1 output&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果是-1，就会按照原来的尺寸进行缩放&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将视频帧导出&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ffmpeg -i input -r 25/1 %6d.png&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;帧速率指定为25帧1秒&lt;/li&gt;
&lt;li&gt;%6d表示需要是6位&lt;/li&gt;
&lt;li&gt;%06d也可以&lt;/li&gt;
&lt;li&gt;输出png&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;图片合成视频&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ffmpeg -i &amp;lt;input&amp;gt; -r &amp;lt;fps&amp;gt; &amp;lt;output&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;比如图片的名字都是&lt;code&gt;img000001.png&lt;/code&gt;这种形式，那么input就写&lt;code&gt;img%06d.png&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以添加&lt;code&gt;-y&lt;/code&gt;表示覆盖&lt;/li&gt;
&lt;li&gt;这样生成的视频是没有声音的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;音视频合成&lt;ul&gt;
&lt;li&gt;适用于视频本身没有声音的情况&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ffmpeg -i &amp;lt;audio&amp;gt; -i &amp;lt;video&amp;gt; &amp;lt;output&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;截取一段视频&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ffmpeg -i &amp;lt;input&amp;gt; -ss 3 -t 23 &amp;lt;output&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;从3s开始，截取长度为23s的视频&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;合并音频(concat)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ffmpeg -i &amp;quot;concat:1.mp3|2.mp3|3.mp3&amp;quot; -acodec copy concat.mp3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;这个方法只支持MP3格式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;混合音频(remix)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ffmpeg -i 1.mp3 -i 2.mp3 -i 3.mp3 -filter_complex amix=inputs=3:duration=first:dropout_transition=2 output.mp3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;要是多个输入就改变&lt;code&gt;inputs=&amp;lt;num_input&amp;gt;&lt;/code&gt;就可以了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修改视频比特率&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ffmpeg -i input.mp4 -b:v 1000k output.mp4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;合成视频&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ffmpeg -f concat -safe 0 -i mylist.txt -c copy myvideo.mp4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;-safe 0 防止出现“unsafe warning”&lt;/li&gt;
&lt;li&gt;txt格式 &lt;code&gt;file &amp;quot;file_path&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content><link href="/Blog/archives/ffmpeg%E6%95%99%E7%A8%8B/" rel="alternate"/><published>2022-05-07T00:00:00+08:06</published></entry></feed>